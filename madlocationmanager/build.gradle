plugins {
    id 'com.android.library'
    id 'maven-publish'
}

group='com.github.maddevsio'

ext {
    // if CI does not set RELEASE_VERSION use hardcoded one
    releaseVersion = System.getenv('RELEASE_VERSION') ?: '0.1.14'
}

android {
    compileSdkVersion 32
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 32
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'mad.location.manager'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'androidx.appcompat:appcompat:1.4.1'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'com.google.android.material:material:1.6.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task androidJavadocs(type: Javadoc, dependsOn: build) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

project.afterEvaluate {
    publishing {
        publications {
            mavenPublication(MavenPublication) {
                groupId = 'com.maddevsio.mad-location-manager'
                artifactId = 'mad-location-manager'
                version = releaseVersion

                from components.release
                artifact sourceJar
                artifact javadocJar

                pom {
                    packaging 'aar'
                    name = 'Mad Location Manager'
                    description = 'This is library for GPS and Accelerometer data "fusion" with Kalman filter'
                    url = 'https://github.com/maddevsio/mad-location-manager'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'Lezh1k'
                            name = 'Oleg Katkov'
                            email = 'lezh1k.vohrer@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/maddevsio/mad-location-manager.git'
                        developerConnection = 'scm:git:ssh://github.com/maddevsio/mad-location-manager.git'
                        url = 'https://github.com/maddevsio/mad-location-manager'
                    }
                }
            }
        }
    }
}

