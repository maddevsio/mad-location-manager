plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'mad.location.manager'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'androidx.appcompat:appcompat:1.4.1'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'com.google.android.material:material:1.6.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'org.chromium.net:cronet-embedded:98.4758.101'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

tasks.register('sourceJar', Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.register('androidJavadocs', Javadoc) {
    dependsOn build
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.configureEach { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

tasks.register('javadocJar', Jar) {
    dependsOn androidJavadocs
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}






